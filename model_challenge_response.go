/*
MX Platform API

The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mxplatformgo

import (
	"encoding/json"
)

// ChallengeResponse struct for ChallengeResponse
type ChallengeResponse struct {
	FieldName NullableString `json:"field_name,omitempty"`
	Guid *string `json:"guid,omitempty"`
	ImageData NullableString `json:"image_data,omitempty"`
	ImageOptions *[]ImageOptionResponse `json:"image_options,omitempty"`
	Label NullableString `json:"label,omitempty"`
	Options *[]OptionResponse `json:"options,omitempty"`
	Type NullableString `json:"type,omitempty"`
}

// NewChallengeResponse instantiates a new ChallengeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChallengeResponse() *ChallengeResponse {
	this := ChallengeResponse{}
	return &this
}

// NewChallengeResponseWithDefaults instantiates a new ChallengeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChallengeResponseWithDefaults() *ChallengeResponse {
	this := ChallengeResponse{}
	return &this
}

// GetFieldName returns the FieldName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChallengeResponse) GetFieldName() string {
	if o == nil || o.FieldName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FieldName.Get()
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeResponse) GetFieldNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FieldName.Get(), o.FieldName.IsSet()
}

// HasFieldName returns a boolean if a field has been set.
func (o *ChallengeResponse) HasFieldName() bool {
	if o != nil && o.FieldName.IsSet() {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given NullableString and assigns it to the FieldName field.
func (o *ChallengeResponse) SetFieldName(v string) {
	o.FieldName.Set(&v)
}
// SetFieldNameNil sets the value for FieldName to be an explicit nil
func (o *ChallengeResponse) SetFieldNameNil() {
	o.FieldName.Set(nil)
}

// UnsetFieldName ensures that no value is present for FieldName, not even an explicit nil
func (o *ChallengeResponse) UnsetFieldName() {
	o.FieldName.Unset()
}

// GetGuid returns the Guid field value if set, zero value otherwise.
func (o *ChallengeResponse) GetGuid() string {
	if o == nil || o.Guid == nil {
		var ret string
		return ret
	}
	return *o.Guid
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChallengeResponse) GetGuidOk() (*string, bool) {
	if o == nil || o.Guid == nil {
		return nil, false
	}
	return o.Guid, true
}

// HasGuid returns a boolean if a field has been set.
func (o *ChallengeResponse) HasGuid() bool {
	if o != nil && o.Guid != nil {
		return true
	}

	return false
}

// SetGuid gets a reference to the given string and assigns it to the Guid field.
func (o *ChallengeResponse) SetGuid(v string) {
	o.Guid = &v
}

// GetImageData returns the ImageData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChallengeResponse) GetImageData() string {
	if o == nil || o.ImageData.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImageData.Get()
}

// GetImageDataOk returns a tuple with the ImageData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeResponse) GetImageDataOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ImageData.Get(), o.ImageData.IsSet()
}

// HasImageData returns a boolean if a field has been set.
func (o *ChallengeResponse) HasImageData() bool {
	if o != nil && o.ImageData.IsSet() {
		return true
	}

	return false
}

// SetImageData gets a reference to the given NullableString and assigns it to the ImageData field.
func (o *ChallengeResponse) SetImageData(v string) {
	o.ImageData.Set(&v)
}
// SetImageDataNil sets the value for ImageData to be an explicit nil
func (o *ChallengeResponse) SetImageDataNil() {
	o.ImageData.Set(nil)
}

// UnsetImageData ensures that no value is present for ImageData, not even an explicit nil
func (o *ChallengeResponse) UnsetImageData() {
	o.ImageData.Unset()
}

// GetImageOptions returns the ImageOptions field value if set, zero value otherwise.
func (o *ChallengeResponse) GetImageOptions() []ImageOptionResponse {
	if o == nil || o.ImageOptions == nil {
		var ret []ImageOptionResponse
		return ret
	}
	return *o.ImageOptions
}

// GetImageOptionsOk returns a tuple with the ImageOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChallengeResponse) GetImageOptionsOk() (*[]ImageOptionResponse, bool) {
	if o == nil || o.ImageOptions == nil {
		return nil, false
	}
	return o.ImageOptions, true
}

// HasImageOptions returns a boolean if a field has been set.
func (o *ChallengeResponse) HasImageOptions() bool {
	if o != nil && o.ImageOptions != nil {
		return true
	}

	return false
}

// SetImageOptions gets a reference to the given []ImageOptionResponse and assigns it to the ImageOptions field.
func (o *ChallengeResponse) SetImageOptions(v []ImageOptionResponse) {
	o.ImageOptions = &v
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChallengeResponse) GetLabel() string {
	if o == nil || o.Label.Get() == nil {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeResponse) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *ChallengeResponse) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *ChallengeResponse) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *ChallengeResponse) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *ChallengeResponse) UnsetLabel() {
	o.Label.Unset()
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ChallengeResponse) GetOptions() []OptionResponse {
	if o == nil || o.Options == nil {
		var ret []OptionResponse
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChallengeResponse) GetOptionsOk() (*[]OptionResponse, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ChallengeResponse) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []OptionResponse and assigns it to the Options field.
func (o *ChallengeResponse) SetOptions(v []OptionResponse) {
	o.Options = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChallengeResponse) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChallengeResponse) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *ChallengeResponse) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *ChallengeResponse) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *ChallengeResponse) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ChallengeResponse) UnsetType() {
	o.Type.Unset()
}

func (o ChallengeResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FieldName.IsSet() {
		toSerialize["field_name"] = o.FieldName.Get()
	}
	if o.Guid != nil {
		toSerialize["guid"] = o.Guid
	}
	if o.ImageData.IsSet() {
		toSerialize["image_data"] = o.ImageData.Get()
	}
	if o.ImageOptions != nil {
		toSerialize["image_options"] = o.ImageOptions
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableChallengeResponse struct {
	value *ChallengeResponse
	isSet bool
}

func (v NullableChallengeResponse) Get() *ChallengeResponse {
	return v.value
}

func (v *NullableChallengeResponse) Set(val *ChallengeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableChallengeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableChallengeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChallengeResponse(val *ChallengeResponse) *NullableChallengeResponse {
	return &NullableChallengeResponse{value: val, isSet: true}
}

func (v NullableChallengeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChallengeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


