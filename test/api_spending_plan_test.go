/*
MX Platform API

Testing SpendingPlanAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mxplatformgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/mxenabled/mx-platform-go"
)

func Test_mxplatformgo_SpendingPlanAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SpendingPlanAPIService CreateSpendingPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.SpendingPlanAPI.CreateSpendingPlan(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpendingPlanAPIService CreateSpendingPlanIterationItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var spendingPlanGuid string
		var userGuid string

		resp, httpRes, err := apiClient.SpendingPlanAPI.CreateSpendingPlanIterationItem(context.Background(), spendingPlanGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpendingPlanAPIService DeleteSpendingPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var spendingPlanGuid string

		httpRes, err := apiClient.SpendingPlanAPI.DeleteSpendingPlan(context.Background(), userGuid, spendingPlanGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpendingPlanAPIService DeleteSpendingPlanAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var spendingPlanGuid string
		var spendingPlanAccountGuid string

		httpRes, err := apiClient.SpendingPlanAPI.DeleteSpendingPlanAccount(context.Background(), userGuid, spendingPlanGuid, spendingPlanAccountGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpendingPlanAPIService DeleteSpendingPlanIterationItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var spendingPlanGuid string
		var iterationItemGuid string

		httpRes, err := apiClient.SpendingPlanAPI.DeleteSpendingPlanIterationItem(context.Background(), userGuid, spendingPlanGuid, iterationItemGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpendingPlanAPIService ListSpendingPlanAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var spendingPlanGuid string

		resp, httpRes, err := apiClient.SpendingPlanAPI.ListSpendingPlanAccounts(context.Background(), userGuid, spendingPlanGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpendingPlanAPIService ListSpendingPlanIterationItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var spendingPlanGuid string

		resp, httpRes, err := apiClient.SpendingPlanAPI.ListSpendingPlanIterationItems(context.Background(), userGuid, spendingPlanGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpendingPlanAPIService ListSpendingPlanIterations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var spendingPlanGuid string

		resp, httpRes, err := apiClient.SpendingPlanAPI.ListSpendingPlanIterations(context.Background(), userGuid, spendingPlanGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpendingPlanAPIService ListSpendingPlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.SpendingPlanAPI.ListSpendingPlans(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpendingPlanAPIService ReadSpendingPlanAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var spendingPlanGuid string
		var spendingPlanAccountGuid string

		resp, httpRes, err := apiClient.SpendingPlanAPI.ReadSpendingPlanAccount(context.Background(), userGuid, spendingPlanGuid, spendingPlanAccountGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpendingPlanAPIService ReadSpendingPlanIteration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var spendingPlanGuid string
		var iterationNumber int32

		resp, httpRes, err := apiClient.SpendingPlanAPI.ReadSpendingPlanIteration(context.Background(), userGuid, spendingPlanGuid, iterationNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpendingPlanAPIService ReadSpendingPlanIterationItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var spendingPlanGuid string
		var iterationItemGuid string

		resp, httpRes, err := apiClient.SpendingPlanAPI.ReadSpendingPlanIterationItem(context.Background(), userGuid, spendingPlanGuid, iterationItemGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpendingPlanAPIService ReadSpendingPlanUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var spendingPlanGuid string

		resp, httpRes, err := apiClient.SpendingPlanAPI.ReadSpendingPlanUser(context.Background(), userGuid, spendingPlanGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpendingPlanAPIService UpdateSpendingPlanIterationItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var spendingPlanGuid string
		var iterationItemGuid string

		resp, httpRes, err := apiClient.SpendingPlanAPI.UpdateSpendingPlanIterationItem(context.Background(), userGuid, spendingPlanGuid, iterationItemGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
