/*
MX Platform API

The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mxplatformgo

import (
	"encoding/json"
)

// checks if the HoldingResponseBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HoldingResponseBody{}

// HoldingResponseBody struct for HoldingResponseBody
type HoldingResponseBody struct {
	Holding *HoldingResponse `json:"holding,omitempty"`
}

// NewHoldingResponseBody instantiates a new HoldingResponseBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHoldingResponseBody() *HoldingResponseBody {
	this := HoldingResponseBody{}
	return &this
}

// NewHoldingResponseBodyWithDefaults instantiates a new HoldingResponseBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHoldingResponseBodyWithDefaults() *HoldingResponseBody {
	this := HoldingResponseBody{}
	return &this
}

// GetHolding returns the Holding field value if set, zero value otherwise.
func (o *HoldingResponseBody) GetHolding() HoldingResponse {
	if o == nil || IsNil(o.Holding) {
		var ret HoldingResponse
		return ret
	}
	return *o.Holding
}

// GetHoldingOk returns a tuple with the Holding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HoldingResponseBody) GetHoldingOk() (*HoldingResponse, bool) {
	if o == nil || IsNil(o.Holding) {
		return nil, false
	}
	return o.Holding, true
}

// HasHolding returns a boolean if a field has been set.
func (o *HoldingResponseBody) HasHolding() bool {
	if o != nil && !IsNil(o.Holding) {
		return true
	}

	return false
}

// SetHolding gets a reference to the given HoldingResponse and assigns it to the Holding field.
func (o *HoldingResponseBody) SetHolding(v HoldingResponse) {
	o.Holding = &v
}

func (o HoldingResponseBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HoldingResponseBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Holding) {
		toSerialize["holding"] = o.Holding
	}
	return toSerialize, nil
}

type NullableHoldingResponseBody struct {
	value *HoldingResponseBody
	isSet bool
}

func (v NullableHoldingResponseBody) Get() *HoldingResponseBody {
	return v.value
}

func (v *NullableHoldingResponseBody) Set(val *HoldingResponseBody) {
	v.value = val
	v.isSet = true
}

func (v NullableHoldingResponseBody) IsSet() bool {
	return v.isSet
}

func (v *NullableHoldingResponseBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHoldingResponseBody(val *HoldingResponseBody) *NullableHoldingResponseBody {
	return &NullableHoldingResponseBody{value: val, isSet: true}
}

func (v NullableHoldingResponseBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHoldingResponseBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


